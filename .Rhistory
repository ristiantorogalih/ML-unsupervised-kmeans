axes = 2)
# opsional: validasi korelasi
ggcorr(ppt_300, label = T)
# get function & data
source("R/biplot.R")
data("USArrests")
head(USArrests)
# PCA & Visualization
fancy_biplot(prcomp(USArrests, scale = T))
loan <- read.csv("data_input/loan2017Q4.csv", stringsAsFactors = T) # mengubah chr menjadi fct
glimpse(loan)
loan_clean <- loan %>%
mutate_at(.vars = c("not_paid", "grdCtoA", "verified"), as.factor)
names(loan_clean)
# indeks kolom numerik
quantivar <- c(3:6,9:11,14) # var numerik
# indeks kolom kategorik
qualivar <- c(1,2,7,8,12,13,15,16) # var categorical
# nama kolom numerik
quanti <- loan_clean %>%
select_if(is.numeric) %>%
colnames()
# indeks kolom numerik
quantivar <- which(colnames(loan) %in% quanti)
# nama kolom kategorik
quali <- loan_clean %>%
select_if(is.factor) %>%
colnames()
qualivar <- which(colnames(loan) %in% quali)
# PCA using FactoMineR
library(FactoMineR)
loan_pca <- PCA(X = loan_clean, scale.unit = T, quali.sup = qualivar, graph = F, ncp = 8)
# cek nilai di tiap PC, ekuivalen dengan obj_pca$x
head(loan_pca$ind$coord)
plot.PCA(x = loan_pca, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 5", # untuk identifikasi 5 outlier terluar
habillage = "purpose", # untuk mewarnai titik observasi (ditulis index/nama kolom)
invisible = "quali") # untuk menghilangkan garis panah
loan_clean[c(1228,1146,368,749,512),]
loan_pca$ind$coord[749,]
plot.PCA(x = loan_pca, choix = "var")
loan_pca$var$coord
cor(loan_clean %>% select_if(is.numeric))
# dimdisc: dimension description
dim <- dimdesc(loan_pca)
# variable yang berkontribusi untuk PC1
as.data.frame(dim$Dim.1$quanti)
library(factoextra)
fviz_contrib(loan_pca, choice = "var")
# PCA summary
summary(loan_pca) # menampilkan summary keseluruhan
loan_pca$eig # menampilkan cummulative proportion variance/eigen value
summary(pca)
# mengambil data hasil PCA sebanyak PC yang dibutuhkan
loan_keep <- loan_pca$ind$coord[,1:5] %>%
as.data.frame()
# reconstruct data menggunakan PC1 - PC5
loan_reconst <- reconst(loan_pca,
ncp = 5) # jumlah PC yang ingin di reconstruct
head(loan_reconst, 3)
# data awal (coba bandingkan dengan hasil reconstruct di atas)
loan_clean %>%
select_if(is.numeric) %>%
head(3)
# read `faceData` 32 pixel
load("data_input/face.rda")
# PCA
face_pca <- PCA(faceData, graph = F, ncp = 32)
head(face_pca$eig, 10)
# create reconstructed data
face_recon <- reconst(face_pca, ncp = 2)
face_recon2 <- reconst(face_pca, ncp = 4)
face_recon3 <- reconst(face_pca, ncp = 6)
face_recon4 <- reconst(face_pca, ncp = 32) # mengambil semua PC
# make function to visualize image data
showMatrix <- function(x, title){
image(t(x[nrow(x):1,]),
xaxt = 'n', yaxt = 'n',
col = gray((0:32)/32),
main = title,
font.main=4,
cex.main=0.5
)
}
# visualize image data
par(mfrow=c(2,2), mar=c(0.5,0.5,1.5,0.5))
showMatrix(faceData, title = 'Original Image')
showMatrix(face_recon, title = 'Reconstructed: 2 dimensions')
showMatrix(face_recon3, title = 'Reconstructed: 6 dimensions')
showMatrix(face_recon4, title = 'Reconstructed: All PCs')
knitr::include_graphics("additional_assets/kmeans.png")
whisky <- read.delim("data_input/whiskies.txt", sep = ",")
head(whisky)
library(tidyverse)
# meng-assign nilai dari kolom Distillery menjadi rownames
whisky_clean <- whisky %>%
column_to_rownames(var = "Distillery")
# membuang kolom yang tidak digunakan
whisky_clean <- whisky_clean %>%
select(-c(RowID, Postcode, Latitude, Longitude))
head(whisky_clean)
anyNA(whisky_clean)
summary(whisky_clean)
# k-means dengan 3 cluster
RNGkind(sample.kind = "Rounding")
set.seed(100)
whi_km <- kmeans(x = whisky_clean, # data yang sudah dicleaning
centers = 3) # jumlah k (cluster yang diinginkan)
whi_km$iter
whi_km$size
whi_km$centers
# k-means dengan 3 cluster
RNGkind(sample.kind = "Rounding")
set.seed(100)
whi_km <- kmeans(x = whisky_clean, # data yang sudah dicleaning
centers = 3) # jumlah k (cluster yang diinginkan)
head(whi_km$cluster) # menghasilkan cluster untuk tiap rownames (nama-nama whiskynya)
# nilai WSS dan BSS/TSS
whi_km$withinss
whi_km$betweenss
whi_km$tot.withinss
# nilai WSS dan BSS/TSS
whi_km$withinss
whi_km$betweenss
whi_km$tot.withinss
whi_km$betweenss/whi_km$totss
RNGkind(sample.kind = "Rounding")
set.seed(123)
# clustering
whi_km_80 <- kmeans(whisky_clean, centers=80)
# nilai WSS dan BSS/TSS
whi_km_80$withinss
RNGkind(sample.kind = "Rounding")
set.seed(123)
# clustering
whi_km_80 <- kmeans(whisky_clean, centers=80)
# nilai WSS dan BSS/TSS
whi_km_80$withinss
whi_km_80$betweenss/whi_km_80$totss
library(factoextra)
library(factoextra)
fviz_nbclust(x=whisky_clean, FUNcluster = "kmeans", method = "wss")
library(factoextra)
fviz_nbclust(x=whisky_clean, FUNcluster = kmeans, method = "wss")
RNGkind(sample.kind = "Rounding")
set.seed(100)
whi_km_opt <- kmeans(whisky_clean, centers=5)
RNGkind(sample.kind = "Rounding")
set.seed(100)
whi_km_opt <- kmeans(whisky_clean, centers=5)
whi_km_opt$withinss
whi_km_opt$betweenss/whi_km_opt$totss
# memasukkan label cluster ke data awal
whisky_clean$cluster <-whi_km_opt$cluster
# melakukan profiling dengan summarise data
whisky_clean
# memasukkan label cluster ke data awal
whisky_clean$cluster <- as.factor(whi_km_opt$cluster)
whisky_clean
# melakukan profiling dengan summarise data
# melakukan profiling dengan summarise data
whisky_clean %>%
group_by(cluster) %>%
summarise_all(.fun="mean")
# optional: mempermudah profiling
whisky_profile %>%
tidyr::pivot_longer(-cluster) %>%
group_by(name) %>%
summarize(cluster_min_val = which.min(value),
cluster_max_val = which.max(value))
# memasukkan label cluster ke data awal
whisky_clean$cluster <- as.factor(whi_km_opt$cluster)
whisky_clean
# melakukan profiling dengan summarise data
whisky_profile<-whisky_clean %>%
group_by(cluster) %>%
summarise_all(.fun="mean")
# optional: mempermudah profiling
whisky_profile %>%
tidyr::pivot_longer(-cluster) %>%
group_by(name) %>%
summarize(cluster_min_val = which.min(value),
cluster_max_val = which.max(value))
whisky_clean %>%
filter(rownames(whisky_clean) == "Laphroig")
whisky_clean %>%
filter(cluster == 2)
fviz_cluster(object = whi_km_opt,
data=whisky_clean%>%select(-cluster))
# PCA menggunakan FactoMineR
whisky_pca <- PCA(whisky_clean,
scale.unit = F, # tidak perlu scaling
quali.sup = 13, # kolom cluster
graph = F)
# visualisasi PCA + hasil kmeans clustering
fviz_pca_biplot(whisky_pca,
habillage = 13, # kolom cluster
geom.ind = "point",
addEllipses = T)
# visualisasi PCA + hasil kmeans clustering
fviz_pca_biplot(whisky_pca,
habillage = 13, # kolom cluster
geom.ind = "point",
addEllipses = T)
# PCA menggunakan FactoMineR
whisky_pca <- PCA(whisky_clean,
scale.unit = F, # tidak perlu scaling
quali.sup = 13, # kolom cluster
graph = F)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(FactoMineR)
# your code here
# your code here
# your code here
# your code here
# your code here
# your code here
# your code here
RNGkind(sample.kind = "Rounding")
kmeansTunning <- function(data, maxK) {
withinall <- NULL
total_k <- NULL
for (i in 2:maxK) {
set.seed(101)
temp <- kmeans(data,i)$tot.withinss
withinall <- append(withinall, temp)
total_k <- append(total_k,i)
}
plot(x = total_k, y = withinall, type = "o", xlab = "Number of Cluster", ylab = "Total within")
}
# kmeansTunning(your_data, maxK = 5)
# your code here
set.seed(101)
# your code here
# your code here
coffee<-read.csv("coffee.csv")
# your code here
coffee<-read.csv("coffee.csv")
head(coffee, n=10)
glimpse(coffee)
# your code here
coffee_clean<-coffee%>%
select(-coffeeId)
glimpse(coffee_clean)
# your code here
coffee_scaled<-scale(coffee_clean)
coffee_scaled
coffee_scaled
head(coffee_scaled,n=10)
# your code here
coffee_scale<-scale(coffee_clean)
head(coffee_scale,n=10)
pca_coffee <- PCA(X = coffee_scale, scale.unit = T, graph = F, ncp = 12)
pca_coffee
summary(pca_coffee)
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 5", # untuk identifikasi 5 outlier terluar
) # untuk menghilangkan garis panah
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 3", # untuk identifikasi 5 outlier terluar
) # untuk menghilangkan garis panah
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "var", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 3", # untuk identifikasi 5 outlier terluar
)
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 3" # untuk identifikasi 5 outlier terluar
) # untuk menghilangkan garis panah
# your code here
plot.PCA(x = pca_coffee,
choix = "var",
select = "contrib 3"
)
#dimdesc
pca_dimdesc <- dimdesc(pca_coffee)
pca_dimdesc$Dim.1
# your code here
plot.PCA(x = pca_coffee,
choix = "var",
select = "contrib 3"
)
#dimdesc
pca_dimdesc <- dimdesc(pca_coffee)
pca_dimdesc$Dim.1
#plot
library(factoextra)
fviz_contrib(pca_coffee, choice = "var")
# your code here
coffee_clean[c(1082),]
# your code here
coffee_clean[c(1082, 1080, 1081),]
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean%>%
coffee_clean[-c(1082, 1080, 1081)]
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean%>%
select(-c(1082, 1080, 1081))
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean[-c(1082, 1080, 1081),]
coffee_clean_no
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no[c(1082, 1080, 1081),]
RNGkind(sample.kind = "Rounding")
kmeansTunning <- function(data, maxK) {
withinall <- NULL
total_k <- NULL
for (i in 2:maxK) {
set.seed(101)
temp <- kmeans(data,i)$tot.withinss
withinall <- append(withinall, temp)
total_k <- append(total_k,i)
}
plot(x = total_k, y = withinall, type = "o", xlab = "Number of Cluster", ylab = "Total within")
}
# kmeansTunning(your_data, maxK = 5)
coffee_clean_no<-scale(coffee_clean_no)
RNGkind(sample.kind = "Rounding")
kmeansTunning <- function(data, maxK) {
withinall <- NULL
total_k <- NULL
for (i in 2:maxK) {
set.seed(101)
temp <- kmeans(data,i)$tot.withinss
withinall <- append(withinall, temp)
total_k <- append(total_k,i)
}
plot(x = total_k, y = withinall, type = "o", xlab = "Number of Cluster", ylab = "Total within")
}
# kmeansTunning(your_data, maxK = 5)
kmeansTunning(coffee_clean_no, maxK = 5)
library(factoextra)
fviz_nbclust(x=coffee_clean_no, FUNcluster = kmeans, method = "wss")
coffee_cluster <- kmeans(x = coffee_clean_no, # data yang sudah dicleaning
centers = 4)
coffee_cluster
head(coffee_cluster$centers)
head(coffee_cluster$clus)
head(coffee_cluster$clusters)
head(coffee_cluster$cluster)
coffee_cluster$cluster
as.data.frame(coffee_cluster$cluster)
# your code here
coffee_clean_no$cluster <- as.factor(coffee_cluster$cluster)
head(coffee_clean_no,n=10)
coffee_clean_no
as.data.frame(coffee_clean_no)
# your code here
coffee_clean_no$cluster <- as.factor(coffee_cluster$cluster)
as.data.frame(coffee_clean_no)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(FactoMineR)
# your code here
coffee<-read.csv("coffee.csv")
head(coffee, n=10)
glimpse(coffee)
# your code here
coffee_clean<-coffee%>%
select(-coffeeId)
glimpse(coffee_clean)
# your code here
coffee_scale<-scale(coffee_clean)
head(coffee_scale,n=10)
# your code here
library(FactoMineR)
pca_coffee <- PCA(X = coffee_scale, scale.unit = T, graph = F, ncp = 12)
summary(pca_coffee)
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 3" # untuk identifikasi 5 outlier terluar
) # untuk menghilangkan garis panah
# your code here
plot.PCA(x = pca_coffee,
choix = "var",
select = "contrib 3"
)
#dimdesc
pca_dimdesc <- dimdesc(pca_coffee)
pca_dimdesc$Dim.1
#plot
library(factoextra)
fviz_contrib(pca_coffee, choice = "var")
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean[-c(1082, 1080, 1081),]
coffee_clean_no[c(1082, 1080, 1081),]
coffee_clean_no<-scale(coffee_clean_no)
RNGkind(sample.kind = "Rounding")
kmeansTunning <- function(data, maxK) {
withinall <- NULL
total_k <- NULL
for (i in 2:maxK) {
set.seed(101)
temp <- kmeans(data,i)$tot.withinss
withinall <- append(withinall, temp)
total_k <- append(total_k,i)
}
plot(x = total_k, y = withinall, type = "o", xlab = "Number of Cluster", ylab = "Total within")
}
# kmeansTunning(your_data, maxK = 5)
kmeansTunning(coffee_clean_no, maxK = 5)
library(factoextra)
fviz_nbclust(x=coffee_clean_no, FUNcluster = kmeans, method = "wss")
# your code here
set.seed(101)
coffee_cluster <- kmeans(x = coffee_clean_no, # data yang sudah dicleaning
centers = 4)
as.data.frame(coffee_cluster$cluster)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(FactoMineR)
# your code here
coffee<-read.csv("coffee.csv")
head(coffee, n=10)
glimpse(coffee)
# your code here
coffee_clean<-coffee%>%
select(-coffeeId)
glimpse(coffee_clean)
# your code here
coffee_scale<-scale(coffee_clean)
head(coffee_scale,n=10)
# your code here
library(FactoMineR)
pca_coffee <- PCA(X = coffee_scale, scale.unit = T, graph = F, ncp = 12)
summary(pca_coffee)
# your code here
plot.PCA(x = pca_coffee, # obj PCA
choix = "ind", # pilihan, kalau mau liat per observasi pakai ind
select = "contrib 3" # untuk identifikasi 5 outlier terluar
) # untuk menghilangkan garis panah
# your code here
plot.PCA(x = pca_coffee,
choix = "var",
select = "contrib 3"
)
#dimdesc
pca_dimdesc <- dimdesc(pca_coffee)
pca_dimdesc$Dim.1
#plot
library(factoextra)
fviz_contrib(pca_coffee, choice = "var")
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean[-c(1082, 1080, 1081),]
coffee_clean_no_scale[c(1082, 1080, 1081),]
# your code here
coffee_clean_no
# your code here
coffee_clean_final$clusters<-as.factor(coffee_cluster$cluster)
# your code here
coffee_clean_no$clusters<-as.factor(coffee_cluster$cluster)
coffee_clean_no
# your code here
coffee_clean_no$clusters<-as.factor(coffee_cluster$cluster)
coffee_clean_no[929,]
# your code here
coffee_clean_no$clusters<-as.factor(coffee_cluster$cluster)
coffee_clean_no[929,]
coffee_clean_no %>%
filter(clusters == 4)
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean[-c(1082, 1080, 1081),]
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no_scale<-scale(coffee_clean_no)
# your code here
coffee_clean[c(1082, 1080, 1081),]
coffee_clean_no<-coffee_clean[-c(1082, 1080, 1081),]
coffee_clean_no[c(1082, 1080, 1081),]
coffee_clean_no_scale<-scale(coffee_clean_no)
coffee_clean_no[clusters==4,]
coffee_clean_no[clusters=4,]
coffee_clean_no[clusters==4,]
coffee_clean_no[929,]
coffee_clean_no[coffee_clean_no$clusters==4,]
coffee_clean_no[coffee_clean_no$clusters=4,]
coffee_clean_no[coffee_clean_no$clusters=="4",]
coffee_clean_no[929,]
# your code here
coffee_clean_no$clusters<-as.factor(coffee_cluster$cluster)
coffee_clean_no[929,]
coffee_clean_no %>%
filter(cluster == 4)
coffee_clean_no %>%
filter(clusters == 4)
coffee_clean_no[c(1060,208,1011),]
# your code here
coffee_profile<-coffee_clean_no %>%
group_by(clusters) %>%
summarise_all(.fun="mean")
cofee_profile
coffee_profile
coffee_profile[218,]
coffee_profile
# your code here
coffee_clean_no[218,]
coffee_profile
